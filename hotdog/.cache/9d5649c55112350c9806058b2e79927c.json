{"dependencies":[{"name":"/Users/sanghan/Desktop/hotdog/package.json","includedInParent":true,"mtime":1522646366212},{"name":"/Users/sanghan/Desktop/hotdog/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1522260134000},{"name":"../backend/tfjs_backend","loc":{"line":13,"column":16}},{"name":"../constraints","loc":{"line":14,"column":28}},{"name":"../errors","loc":{"line":15,"column":23}},{"name":"../initializers","loc":{"line":16,"column":29}},{"name":"../regularizers","loc":{"line":17,"column":29}},{"name":"../utils/conv_utils","loc":{"line":18,"column":27}},{"name":"../utils/generic_utils","loc":{"line":20,"column":30}},{"name":"./convolutional","loc":{"line":21,"column":30}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar K = require(\"../backend/tfjs_backend\");\nvar constraints_1 = require(\"../constraints\");\nvar errors_1 = require(\"../errors\");\nvar initializers_1 = require(\"../initializers\");\nvar regularizers_1 = require(\"../regularizers\");\nvar conv_utils_1 = require(\"../utils/conv_utils\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar generic_utils_1 = require(\"../utils/generic_utils\");\nvar convolutional_1 = require(\"./convolutional\");\nvar DepthwiseConv2D = (function (_super) {\n    __extends(DepthwiseConv2D, _super);\n    function DepthwiseConv2D(config) {\n        var _this = _super.call(this, config) || this;\n        _this.depthwiseKernel = null;\n        _this.depthMultiplier =\n            config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        _this.depthwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.depthwiseConstraint = constraints_1.getConstraint(config.depthwiseConstraint);\n        _this.depthwiseRegularizer = regularizers_1.getRegularizer(config.depthwiseRegularizer);\n        return _this;\n    }\n    DepthwiseConv2D.prototype.build = function (inputShape) {\n        inputShape = generic_utils_1.getExactlyOneShape(inputShape);\n        if (inputShape.length < 4) {\n            throw new errors_1.ValueError(\"Inputs to DepthwiseConv2D should have rank 4. \" +\n                (\"Received input shape: \" + JSON.stringify(inputShape) + \".\"));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new errors_1.ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' +\n                (\"be defined, but is not (\" + inputShape[channelAxis] + \").\"));\n        }\n        var inputDim = inputShape[channelAxis];\n        var depthwiseKernelShape = [\n            this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n        ];\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    DepthwiseConv2D.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils_1.getExactlyOneTensor(inputs);\n        var outputs = K.depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n        if (this.useBias) {\n            outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n        }\n        if (this.activation != null) {\n            outputs = this.activation(outputs);\n        }\n        return outputs;\n    };\n    DepthwiseConv2D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils_1.getExactlyOneShape(inputShape);\n        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        var outFilters = this.dataFormat === 'channelsFirst' ?\n            inputShape[1] * this.depthMultiplier :\n            inputShape[3] * this.depthMultiplier;\n        var outRows = conv_utils_1.convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n        var outCols = conv_utils_1.convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], outFilters, outRows, outCols];\n        }\n        else {\n            return [inputShape[0], outRows, outCols, outFilters];\n        }\n    };\n    return DepthwiseConv2D;\n}(convolutional_1.Conv2D));\nexports.DepthwiseConv2D = DepthwiseConv2D;\ngeneric_utils.ClassNameMap.register('DepthwiseConv2D', DepthwiseConv2D);\n"},"hash":"5dcec19a8a486d3263d0f029f9288e11","cacheData":{"env":{}}}