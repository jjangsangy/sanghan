{"dependencies":[{"name":"/Users/sanghan/Desktop/hotdog/package.json","includedInParent":true,"mtime":1522646366212},{"name":"/Users/sanghan/Desktop/hotdog/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0},{"name":"../environment","loc":{"line":13,"column":28}},{"name":"../globals","loc":{"line":14,"column":24}},{"name":"../ops/ops","loc":{"line":15,"column":20}},{"name":"./optimizer","loc":{"line":16,"column":26}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../environment\");\nvar globals_1 = require(\"../globals\");\nvar ops_1 = require(\"../ops/ops\");\nvar optimizer_1 = require(\"./optimizer\");\nvar AdamOptimizer = (function (_super) {\n    __extends(AdamOptimizer, _super);\n    function AdamOptimizer(learningRate, beta1, beta2, epsilon) {\n        if (epsilon === void 0) { epsilon = 1e-8; }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.accumulatedFirstMoment = {};\n        _this.accumulatedSecondMoment = {};\n        _this.c = globals_1.keep(ops_1.scalar(-learningRate));\n        _this.eps = globals_1.keep(ops_1.scalar(epsilon));\n        _this.beta1 = globals_1.keep(ops_1.scalar(beta1));\n        _this.beta2 = globals_1.keep(ops_1.scalar(beta2));\n        globals_1.tidy(function () {\n            _this.accBeta1 = ops_1.scalar(beta1).variable();\n            _this.accBeta2 = ops_1.scalar(beta2).variable();\n        });\n        _this.oneMinusBeta1 = globals_1.keep(ops_1.scalar(1 - beta1));\n        _this.oneMinusBeta2 = globals_1.keep(ops_1.scalar(1 - beta2));\n        _this.one = globals_1.keep(ops_1.scalar(1));\n        return _this;\n    }\n    AdamOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        globals_1.tidy(function () {\n            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);\n            var oneMinusAccBeta2 = _this.one.sub(_this.accBeta2);\n            for (var variableName in variableGradients) {\n                var value = environment_1.ENV.engine.registeredVariables[variableName];\n                if (_this.accumulatedFirstMoment[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedFirstMoment[variableName] =\n                        ops_1.zerosLike(value).variable(trainable);\n                }\n                if (_this.accumulatedSecondMoment[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedSecondMoment[variableName] =\n                        ops_1.zerosLike(value).variable(trainable);\n                }\n                var gradient = variableGradients[variableName];\n                var firstMoment = _this.accumulatedFirstMoment[variableName];\n                var secondMoment = _this.accumulatedSecondMoment[variableName];\n                var newFirstMoment = _this.beta1.mul(firstMoment).add(_this.oneMinusBeta1.mul(gradient));\n                var newSecondMoment = _this.beta2.mul(secondMoment)\n                    .add(_this.oneMinusBeta2.mul(gradient.square()));\n                var biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);\n                var biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);\n                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);\n                _this.accumulatedSecondMoment[variableName].assign(newSecondMoment);\n                var newValue = _this.c\n                    .mul(biasCorrectedFirstMoment.div(_this.eps.add(biasCorrectedSecondMoment.sqrt())))\n                    .add(value);\n                value.assign(newValue);\n            }\n            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1));\n            _this.accBeta2.assign(_this.accBeta2.mul(_this.beta2));\n        });\n    };\n    AdamOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.c.dispose();\n        this.eps.dispose();\n        this.beta1.dispose();\n        this.beta2.dispose();\n        this.accBeta1.dispose();\n        this.accBeta2.dispose();\n        this.oneMinusBeta1.dispose();\n        this.oneMinusBeta2.dispose();\n        this.one.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            Object.keys(this.accumulatedFirstMoment)\n                .forEach(function (name) { return _this.accumulatedFirstMoment[name].dispose(); });\n        }\n        if (this.accumulatedSecondMoment != null) {\n            Object.keys(this.accumulatedSecondMoment)\n                .forEach(function (name) { return _this.accumulatedSecondMoment[name].dispose(); });\n        }\n    };\n    return AdamOptimizer;\n}(optimizer_1.Optimizer));\nexports.AdamOptimizer = AdamOptimizer;\n"},"hash":"df31e6976302f0547706e4a5212fc587","cacheData":{"env":{}}}