{"dependencies":[{"name":"/Users/sanghan/Desktop/hotdog/package.json","includedInParent":true,"mtime":1522646366212},{"name":"babel-runtime/regenerator"},{"name":"babel-runtime/helpers/asyncToGenerator"},{"name":"@tensorflow/tfjs","loc":{"line":1,"column":20}},{"name":"./imagenet_classes","loc":{"line":3,"column":31}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTopKClasses = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _this = undefined;\n\n/**\n * Given an image element, makes a prediction through mobilenet returning the\n * probabilities of the top K classes.\n */\nvar predict = function () {\n  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(imgElement) {\n    var startTime, logits, classes, totalTime;\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            status('Predicting...');\n\n            startTime = performance.now();\n            logits = tf.tidy(function () {\n              // tf.fromPixels() returns a Tensor from an image element.\n              var img = tf.fromPixels(imgElement).toFloat();\n\n              var offset = tf.scalar(127.5);\n              // Normalize the image from [0, 255] to [-1, 1].\n              var normalized = img.sub(offset).div(offset);\n\n              // Reshape to a single-element batch so we can pass it to predict.\n              var batched = normalized.reshape([1, IMAGE_SIZE, IMAGE_SIZE, 3]);\n\n              // Make a prediction through mobilenet.\n              return mobilenet.predict(batched);\n            });\n\n            // Convert logits to probabilities and class names.\n\n            _context2.next = 5;\n            return getTopKClasses(logits, TOPK_PREDICTIONS);\n\n          case 5:\n            classes = _context2.sent;\n            totalTime = performance.now() - startTime;\n\n            status('Done in ' + Math.floor(totalTime) + 'ms');\n\n            // Show the classes in the DOM.\n            showResults(imgElement, classes);\n\n          case 9:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function predict(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n * Computes the probabilities of the topK classes given logits by computing\n * softmax to get probabilities and then sorting the probabilities.\n * @param logits Tensor representing the logits from MobileNet.\n * @param topK The number of top predictions to show.\n */\n\n\nvar getTopKClasses = exports.getTopKClasses = function () {\n  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(logits, topK) {\n    var values, valuesAndIndices, i, topkValues, topkIndices, _i, topClassesAndProbs, _i2;\n\n    return _regenerator2.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return logits.data();\n\n          case 2:\n            values = _context3.sent;\n            valuesAndIndices = [];\n\n            for (i = 0; i < values.length; i++) {\n              valuesAndIndices.push({ value: values[i], index: i });\n            }\n            valuesAndIndices.sort(function (a, b) {\n              return b.value - a.value;\n            });\n            topkValues = new Float32Array(topK);\n            topkIndices = new Int32Array(topK);\n\n            for (_i = 0; _i < topK; _i++) {\n              topkValues[_i] = valuesAndIndices[_i].value;\n              topkIndices[_i] = valuesAndIndices[_i].index;\n            }\n\n            topClassesAndProbs = [];\n\n            for (_i2 = 0; _i2 < topkIndices.length; _i2++) {\n              topClassesAndProbs.push({\n                className: _imagenet_classes.IMAGENET_CLASSES[topkIndices[_i2]],\n                probability: topkValues[_i2]\n              });\n            }\n            return _context3.abrupt('return', topClassesAndProbs);\n\n          case 12:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function getTopKClasses(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n//\n// UI\n//\n\nvar _tfjs = require('@tensorflow/tfjs');\n\nvar tf = _interopRequireWildcard(_tfjs);\n\nvar _imagenet_classes = require('./imagenet_classes');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MOBILENET_MODEL_PATH =\n// tslint:disable-next-line:max-line-length\n'https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_0.25_224/model.json';\n\nvar IMAGE_SIZE = 224;\nvar TOPK_PREDICTIONS = 10;\n\nvar mobilenet = void 0;\nvar mobilenetDemo = function () {\n  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n    var imageElement;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            status('Loading model...');\n\n            _context.next = 3;\n            return tf.loadModel(MOBILENET_MODEL_PATH);\n\n          case 3:\n            mobilenet = _context.sent;\n\n\n            // Warmup the model. This isn't necessary, but makes the first prediction\n            // faster. Call `dispose` to release the WebGL memory allocated for the return\n            // value of `predict`.\n            mobilenet.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])).dispose();\n\n            status('');\n\n            // Make a prediction through the locally hosted cat.jpg.\n            imageElement = document.getElementById('image');\n\n            if (imageElement.complete && imageElement.naturalHeight !== 0) {\n              predict(imageElement);\n              imageElement.style.display = '';\n            } else {\n              imageElement.onload = function () {\n                predict(imageElement);\n                imageElement.style.display = '';\n              };\n            }\n\n            document.getElementById('file-container').style.display = '';\n\n          case 9:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, _this);\n  }));\n\n  return function mobilenetDemo() {\n    return _ref.apply(this, arguments);\n  };\n}();function showResults(imgElement, classes) {\n  var predictionContainer = document.createElement('div');\n  predictionContainer.className = 'pred-container';\n\n  var imgContainer = document.createElement('div');\n  imgContainer.appendChild(imgElement);\n  predictionContainer.appendChild(imgContainer);\n\n  var probsContainer = document.createElement('div');\n  for (var i = 0; i < classes.length; i++) {\n    var row = document.createElement('div');\n    row.className = 'row';\n\n    var classElement = document.createElement('div');\n    classElement.className = 'cell';\n    classElement.innerText = classes[i].className;\n    row.appendChild(classElement);\n\n    var probsElement = document.createElement('div');\n    probsElement.className = 'cell';\n    probsElement.innerText = classes[i].probability.toFixed(3);\n    row.appendChild(probsElement);\n\n    probsContainer.appendChild(row);\n  }\n  predictionContainer.appendChild(probsContainer);\n\n  predictionsElement.insertBefore(predictionContainer, predictionsElement.firstChild);\n}\n\nvar filesElement = document.getElementById('files');\nfilesElement.addEventListener('change', function (evt) {\n  var files = evt.target.files;\n  // Display thumbnails & issue call to predict each image.\n  for (var i = 0, f; f = files[i]; i++) {\n    // Only process image files (skip non image files)\n    if (!f.type.match('image.*')) {\n      continue;\n    }\n    var reader = new FileReader();\n    var idx = i;\n    // Closure to capture the file information.\n    reader.onload = function (e) {\n      // Fill the image & call predict.\n      var img = document.createElement('img');\n      img.src = e.target.result;\n      img.width = IMAGE_SIZE;\n      img.height = IMAGE_SIZE;\n      img.onload = function () {\n        return predict(img);\n      };\n    };\n\n    // Read in the image file as a data URL.\n    reader.readAsDataURL(f);\n  }\n});\n\nvar demoStatusElement = document.getElementById('status');\nvar status = function status(msg) {\n  return demoStatusElement.innerText = msg;\n};\n\nvar predictionsElement = document.getElementById('predictions');\n\nmobilenetDemo();"},"hash":"41223061a1ef5785abf5833fa1df3e41","cacheData":{"env":{}}}