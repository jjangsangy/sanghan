{"dependencies":[{"name":"/Users/sanghan/Desktop/hotdog/package.json","includedInParent":true,"mtime":1522646366212},{"name":"/Users/sanghan/Desktop/hotdog/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0},{"name":"../../ops/selu_util","loc":{"line":3,"column":24}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar selu_util = require(\"../../ops/selu_util\");\nvar UnaryOpProgram = (function () {\n    function UnaryOpProgram(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = \"\\n      float unaryOperation(float x) {\\n        \" + opSnippet + \"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \";\n    }\n    return UnaryOpProgram;\n}());\nexports.UnaryOpProgram = UnaryOpProgram;\nvar CHECK_NAN_SNIPPET = \"\\n  if (isNaN(x)) return x;\\n\";\nexports.ABS = \"\\n  return abs(x);\\n\";\nexports.RELU = CHECK_NAN_SNIPPET + \"\\n  return (x < 0.0) ? 0.0 : x;\\n\";\nexports.ELU = \"\\n  return (x >= 0.0) ? x : (exp(x) - 1.0);\\n\";\nexports.ELU_DER = \"\\n  return (x >= 0.0) ? 1.0 : exp(x);\\n\";\nexports.SELU = \"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \" + selu_util.SELU_SCALEALPHA + \";\\n  float scale = \" + selu_util.SELU_SCALE + \";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";\nfunction LEAKY_RELU(alpha) {\n    return \"\\n    return (x >= 0.0) ? x : \" + alpha + \" * x;\\n  \";\n}\nexports.LEAKY_RELU = LEAKY_RELU;\nfunction STEP(alpha) {\n    if (alpha === void 0) { alpha = 0.0; }\n    return CHECK_NAN_SNIPPET + (\"\\n    return x > 0.0 ? 1.0 : float(\" + alpha + \");\\n  \");\n}\nexports.STEP = STEP;\nexports.NEG = \"\\n  return -x;\\n\";\nexports.CEIL = \"\\n  return ceil(x);\\n\";\nexports.FLOOR = \"\\n  return floor(x);\\n\";\nexports.EXP = \"\\n  return exp(x);\\n\";\nexports.LOG = \"\\n  return log(x);\\n\";\nexports.LOG1P = \"\\n  return log(1.0 + x);\\n\";\nexports.SQRT = CHECK_NAN_SNIPPET + \"\\n  return sqrt(x);\\n\";\nexports.SIGMOID = \"\\n  return 1.0 / (1.0 + exp(-1.0 * x));\\n\";\nexports.SIN = CHECK_NAN_SNIPPET + \"\\n  return sin(x);\\n\";\nexports.COS = CHECK_NAN_SNIPPET + \"\\n  return cos(x);\\n\";\nexports.TAN = \"\\n  return tan(x);\\n\";\nexports.ASIN = CHECK_NAN_SNIPPET + \"\\n  return asin(x);\\n\";\nexports.ACOS = CHECK_NAN_SNIPPET + \"\\n  return acos(x);\\n\";\nexports.ATAN = CHECK_NAN_SNIPPET + \"\\n  return atan(x);\\n\";\nexports.SINH = \"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\";\nexports.COSH = \"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\";\nexports.TANH = \"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\";\nexports.SQUARE = \"\\n  return x * x;\\n\";\nexports.LOGICAL_NOT = CHECK_NAN_SNIPPET + \"\\n  return float(!(x >= 1.0));\\n\";\nexports.TO_INT = \"\\n  return float(int(x));\\n\";\n"},"hash":"fba5ba2d43cdbd9d43a25683b7bf9483","cacheData":{"env":{}}}