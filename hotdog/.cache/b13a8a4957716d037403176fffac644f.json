{"dependencies":[{"name":"/Users/sanghan/Desktop/tfjs-examples/mobilenet/package.json","includedInParent":true,"mtime":1522644996454},{"name":"/Users/sanghan/Desktop/tfjs-examples/mobilenet/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":0},{"name":"./ops/ops","loc":{"line":38,"column":20}},{"name":"./util","loc":{"line":39,"column":19}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ops_1 = require(\"./ops/ops\");\nvar util = require(\"./util\");\nvar DTYPE_VALUE_SIZE_MAP = {\n    'float32': 4,\n    'int32': 4\n};\nfunction loadWeights(manifest, filePathPrefix, weightNames) {\n    if (filePathPrefix === void 0) { filePathPrefix = ''; }\n    return __awaiter(this, void 0, void 0, function () {\n        var groupIndicesToFetchMap, groupWeightsToFetch, weightsFound, allManifestWeightNames, weightsNotFound, groupIndicesToFetch, requests, responses, buffers, weightsTensorMap, bufferIndexOffset;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    groupIndicesToFetchMap = manifest.map(function () { return false; });\n                    groupWeightsToFetch = {};\n                    weightsFound = weightNames != null ? weightNames.map(function () { return false; }) : [];\n                    allManifestWeightNames = [];\n                    manifest.forEach(function (manifestGroupConfig, groupIndex) {\n                        var groupOffset = 0;\n                        manifestGroupConfig.weights.forEach(function (weightsEntry) {\n                            var weightsBytes = DTYPE_VALUE_SIZE_MAP[weightsEntry.dtype] *\n                                util.sizeFromShape(weightsEntry.shape);\n                            var enqueueWeightsForFetchingFn = function () {\n                                groupIndicesToFetchMap[groupIndex] = true;\n                                if (groupWeightsToFetch[groupIndex] == null) {\n                                    groupWeightsToFetch[groupIndex] = [];\n                                }\n                                groupWeightsToFetch[groupIndex].push({\n                                    manifestEntry: weightsEntry,\n                                    groupOffset: groupOffset,\n                                    sizeBytes: weightsBytes\n                                });\n                            };\n                            if (weightNames != null) {\n                                weightNames.forEach(function (weightName, weightIndex) {\n                                    if (weightName === weightsEntry.name) {\n                                        enqueueWeightsForFetchingFn();\n                                        weightsFound[weightIndex] = true;\n                                    }\n                                });\n                            }\n                            else {\n                                enqueueWeightsForFetchingFn();\n                            }\n                            allManifestWeightNames.push(weightsEntry.name);\n                            groupOffset += weightsBytes;\n                        });\n                    });\n                    if (!weightsFound.every(function (found) { return found; })) {\n                        weightsNotFound = weightNames.filter(function (weight, i) { return !weightsFound[i]; });\n                        throw new Error(\"Could not find weights in manifest with names: \" +\n                            (weightsNotFound.join(', ') + \". \\n\") +\n                            \"Manifest JSON has weights with names: \" +\n                            (allManifestWeightNames.join(', ') + \".\"));\n                    }\n                    groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {\n                        if (shouldFetch) {\n                            accumulator.push(i);\n                        }\n                        return accumulator;\n                    }, []);\n                    requests = [];\n                    groupIndicesToFetch.forEach(function (i) {\n                        manifest[i].paths.forEach(function (filepath) {\n                            var fetchUrl = filePathPrefix +\n                                (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                            requests.push(fetch(fetchUrl));\n                        });\n                    });\n                    return [4, Promise.all(requests)];\n                case 1:\n                    responses = _a.sent();\n                    return [4, Promise.all(responses.map(function (response) { return response.arrayBuffer(); }))];\n                case 2:\n                    buffers = _a.sent();\n                    weightsTensorMap = {};\n                    bufferIndexOffset = 0;\n                    groupIndicesToFetch.forEach(function (i) {\n                        var numBuffers = manifest[i].paths.length;\n                        var groupBytes = 0;\n                        for (var i_1 = 0; i_1 < numBuffers; i_1++) {\n                            groupBytes += buffers[bufferIndexOffset + i_1].byteLength;\n                        }\n                        var groupBuffer = new ArrayBuffer(groupBytes);\n                        var groupByteBuffer = new Uint8Array(groupBuffer);\n                        var groupBufferOffset = 0;\n                        for (var i_2 = 0; i_2 < numBuffers; i_2++) {\n                            var buffer = new Uint8Array(buffers[bufferIndexOffset + i_2]);\n                            groupByteBuffer.set(buffer, groupBufferOffset);\n                            groupBufferOffset += buffer.byteLength;\n                        }\n                        var weightsEntries = groupWeightsToFetch[i];\n                        weightsEntries.forEach(function (weightsEntry) {\n                            var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                            var typedArray;\n                            if (weightsEntry.manifestEntry.dtype === 'float32') {\n                                typedArray = new Float32Array(byteBuffer);\n                            }\n                            else if (weightsEntry.manifestEntry.dtype === 'int32') {\n                                typedArray = new Int32Array(byteBuffer);\n                            }\n                            else {\n                                throw new Error(\"Weight \" + weightsEntry.manifestEntry.name + \" has unknown dtype \" +\n                                    (weightsEntry.manifestEntry.dtype + \".\"));\n                            }\n                            var weightName = weightsEntry.manifestEntry.name;\n                            if (weightsTensorMap[weightName] != null) {\n                                throw new Error(\"Duplicate weight with name \" + weightName + \". \" +\n                                    \"Please make sure weights names are unique in the manifest JSON.\");\n                            }\n                            weightsTensorMap[weightName] = ops_1.tensor(typedArray, weightsEntry.manifestEntry.shape, weightsEntry.manifestEntry.dtype);\n                        });\n                        bufferIndexOffset += numBuffers;\n                    });\n                    return [2, weightsTensorMap];\n            }\n        });\n    });\n}\nexports.loadWeights = loadWeights;\n"},"hash":"cff4b7f6cfa0a971fb36792b56b3f67d","cacheData":{"env":{}}}